# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 1.7.15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401
# python 2 and python 3 compatibility library
from typing import Dict

import six

from eve_tools.swagger_client.api_client import ApiClient


class UniverseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_universe_ancestries(self, **kwargs) -> Dict:
        """Get ancestries

        Get all character ancestries  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_ancestries(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_ancestries_with_http_info(**kwargs)
        else:
            data = self.get_universe_ancestries_with_http_info(**kwargs)
            return data

    def get_universe_ancestries_with_http_info(self, **kwargs) -> Dict:
        """Get ancestries

        Get all character ancestries  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_ancestries_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_ancestries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/ancestries/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_asteroid_belts_asteroid_belt_id(self, asteroid_belt_id, **kwargs):
        """Get asteroid belt information

        Get information on an asteroid belt  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_asteroid_belts_asteroid_belt_id(asteroid_belt_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int asteroid_belt_id: asteroid_belt_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_asteroid_belts_asteroid_belt_id_with_http_info(asteroid_belt_id, **kwargs)
        else:
            data = self.get_universe_asteroid_belts_asteroid_belt_id_with_http_info(asteroid_belt_id, **kwargs)
            return data

    def get_universe_asteroid_belts_asteroid_belt_id_with_http_info(self, asteroid_belt_id, **kwargs):
        """Get asteroid belt information

        Get information on an asteroid belt  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_asteroid_belts_asteroid_belt_id_with_http_info(asteroid_belt_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int asteroid_belt_id: asteroid_belt_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asteroid_belt_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_asteroid_belts_asteroid_belt_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asteroid_belt_id' is set
        if self.api_client.client_side_validation and ('asteroid_belt_id' not in params or
                                                       params['asteroid_belt_id'] is None):
            raise ValueError(
                "Missing the required parameter `asteroid_belt_id` when calling `get_universe_asteroid_belts_asteroid_belt_id`")

        collection_formats = {}

        path_params = {}
        if 'asteroid_belt_id' in params:
            path_params['asteroid_belt_id'] = params['asteroid_belt_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/asteroid_belts/{asteroid_belt_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_bloodlines(self, **kwargs) -> Dict:
        """Get bloodlines

        Get a list of bloodlines  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_bloodlines(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_bloodlines_with_http_info(**kwargs)
        else:
            data = self.get_universe_bloodlines_with_http_info(**kwargs)
            return data

    def get_universe_bloodlines_with_http_info(self, **kwargs) -> Dict:
        """Get bloodlines

        Get a list of bloodlines  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_bloodlines_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_bloodlines" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/bloodlines/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_categories(self, **kwargs) -> Dict:
        """Get item categories

        Get a list of item categories  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_categories(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_categories_with_http_info(**kwargs)
        else:
            data = self.get_universe_categories_with_http_info(**kwargs)
            return data

    def get_universe_categories_with_http_info(self, **kwargs) -> Dict:
        """Get item categories

        Get a list of item categories  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_categories_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/categories/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_categories_category_id(self, category_id, **kwargs):
        """Get item category information

        Get information of an item category  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_categories_category_id(category_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int category_id: An Eve item category ID (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_categories_category_id_with_http_info(category_id, **kwargs)
        else:
            data = self.get_universe_categories_category_id_with_http_info(category_id, **kwargs)
            return data

    def get_universe_categories_category_id_with_http_info(self, category_id, **kwargs):
        """Get item category information

        Get information of an item category  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_categories_category_id_with_http_info(category_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int category_id: An Eve item category ID (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_id', 'accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_categories_category_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_id' is set
        if self.api_client.client_side_validation and ('category_id' not in params or
                                                       params['category_id'] is None):
            raise ValueError(
                "Missing the required parameter `category_id` when calling `get_universe_categories_category_id`")

        collection_formats = {}

        path_params = {}
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/categories/{category_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_constellations(self, **kwargs) -> Dict:
        """Get constellations

        Get a list of constellations  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_constellations(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_constellations_with_http_info(**kwargs)
        else:
            data = self.get_universe_constellations_with_http_info(**kwargs)
            return data

    def get_universe_constellations_with_http_info(self, **kwargs) -> Dict:
        """Get constellations

        Get a list of constellations  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_constellations_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_constellations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/constellations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_constellations_constellation_id(self, constellation_id, **kwargs):
        """Get constellation information

        Get information on a constellation  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_constellations_constellation_id(constellation_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int constellation_id: constellation_id integer (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_constellations_constellation_id_with_http_info(constellation_id, **kwargs)
        else:
            data = self.get_universe_constellations_constellation_id_with_http_info(constellation_id, **kwargs)
            return data

    def get_universe_constellations_constellation_id_with_http_info(self, constellation_id, **kwargs):
        """Get constellation information

        Get information on a constellation  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_constellations_constellation_id_with_http_info(constellation_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int constellation_id: constellation_id integer (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['constellation_id', 'accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_constellations_constellation_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'constellation_id' is set
        if self.api_client.client_side_validation and ('constellation_id' not in params or
                                                       params['constellation_id'] is None):
            raise ValueError(
                "Missing the required parameter `constellation_id` when calling `get_universe_constellations_constellation_id`")

        collection_formats = {}

        path_params = {}
        if 'constellation_id' in params:
            path_params['constellation_id'] = params['constellation_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/constellations/{constellation_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_factions(self, **kwargs) -> Dict:
        """Get factions

        Get a list of factions  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_factions(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_factions_with_http_info(**kwargs)
        else:
            data = self.get_universe_factions_with_http_info(**kwargs)
            return data

    def get_universe_factions_with_http_info(self, **kwargs) -> Dict:
        """Get factions

        Get a list of factions  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_factions_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_factions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v2/universe/factions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_graphics(self, **kwargs) -> Dict:
        """Get graphics

        Get a list of graphics  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_graphics(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_graphics_with_http_info(**kwargs)
        else:
            data = self.get_universe_graphics_with_http_info(**kwargs)
            return data

    def get_universe_graphics_with_http_info(self, **kwargs) -> Dict:
        """Get graphics

        Get a list of graphics  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_graphics_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_graphics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/graphics/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_graphics_graphic_id(self, graphic_id, **kwargs):
        """Get graphic information

        Get information on a graphic  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_graphics_graphic_id(graphic_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int graphic_id: graphic_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_graphics_graphic_id_with_http_info(graphic_id, **kwargs)
        else:
            data = self.get_universe_graphics_graphic_id_with_http_info(graphic_id, **kwargs)
            return data

    def get_universe_graphics_graphic_id_with_http_info(self, graphic_id, **kwargs):
        """Get graphic information

        Get information on a graphic  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_graphics_graphic_id_with_http_info(graphic_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int graphic_id: graphic_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['graphic_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_graphics_graphic_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'graphic_id' is set
        if self.api_client.client_side_validation and ('graphic_id' not in params or
                                                       params['graphic_id'] is None):
            raise ValueError(
                "Missing the required parameter `graphic_id` when calling `get_universe_graphics_graphic_id`")

        collection_formats = {}

        path_params = {}
        if 'graphic_id' in params:
            path_params['graphic_id'] = params['graphic_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/graphics/{graphic_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_groups(self, **kwargs) -> Dict:
        """Get item groups

        Get a list of item groups  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_groups(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param int page: Which page of results to return
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_groups_with_http_info(**kwargs)
        else:
            data = self.get_universe_groups_with_http_info(**kwargs)
            return data

    def get_universe_groups_with_http_info(self, **kwargs) -> Dict:
        """Get item groups

        Get a list of item groups  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_groups_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param int page: Which page of results to return
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match', 'page']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_groups" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):
            raise ValueError(
                "Invalid value for parameter `page` when calling `get_universe_groups`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/groups/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_groups_group_id(self, group_id, **kwargs):
        """Get item group information

        Get information on an item group  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_groups_group_id(group_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int group_id: An Eve item group ID (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_groups_group_id_with_http_info(group_id, **kwargs)
        else:
            data = self.get_universe_groups_group_id_with_http_info(group_id, **kwargs)
            return data

    def get_universe_groups_group_id_with_http_info(self, group_id, **kwargs):
        """Get item group information

        Get information on an item group  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_groups_group_id_with_http_info(group_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int group_id: An Eve item group ID (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_groups_group_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_universe_groups_group_id`")

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/groups/{group_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_moons_moon_id(self, moon_id, **kwargs):
        """Get moon information

        Get information on a moon  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_moons_moon_id(moon_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int moon_id: moon_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_moons_moon_id_with_http_info(moon_id, **kwargs)
        else:
            data = self.get_universe_moons_moon_id_with_http_info(moon_id, **kwargs)
            return data

    def get_universe_moons_moon_id_with_http_info(self, moon_id, **kwargs):
        """Get moon information

        Get information on a moon  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_moons_moon_id_with_http_info(moon_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int moon_id: moon_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['moon_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_moons_moon_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'moon_id' is set
        if self.api_client.client_side_validation and ('moon_id' not in params or
                                                       params['moon_id'] is None):
            raise ValueError("Missing the required parameter `moon_id` when calling `get_universe_moons_moon_id`")

        collection_formats = {}

        path_params = {}
        if 'moon_id' in params:
            path_params['moon_id'] = params['moon_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/moons/{moon_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_planets_planet_id(self, planet_id, **kwargs):
        """Get planet information

        Get information on a planet  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_planets_planet_id(planet_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int planet_id: planet_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_planets_planet_id_with_http_info(planet_id, **kwargs)
        else:
            data = self.get_universe_planets_planet_id_with_http_info(planet_id, **kwargs)
            return data

    def get_universe_planets_planet_id_with_http_info(self, planet_id, **kwargs):
        """Get planet information

        Get information on a planet  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_planets_planet_id_with_http_info(planet_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int planet_id: planet_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['planet_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_planets_planet_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'planet_id' is set
        if self.api_client.client_side_validation and ('planet_id' not in params or
                                                       params['planet_id'] is None):
            raise ValueError("Missing the required parameter `planet_id` when calling `get_universe_planets_planet_id`")

        collection_formats = {}

        path_params = {}
        if 'planet_id' in params:
            path_params['planet_id'] = params['planet_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/planets/{planet_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_races(self, **kwargs) -> Dict:
        """Get character races

        Get a list of character races  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_races(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_races_with_http_info(**kwargs)
        else:
            data = self.get_universe_races_with_http_info(**kwargs)
            return data

    def get_universe_races_with_http_info(self, **kwargs) -> Dict:
        """Get character races

        Get a list of character races  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_races_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_races" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/races/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_regions(self, **kwargs) -> Dict:
        """Get regions

        Get a list of regions  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_regions(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_regions_with_http_info(**kwargs)
        else:
            data = self.get_universe_regions_with_http_info(**kwargs)
            return data

    def get_universe_regions_with_http_info(self, **kwargs) -> Dict:
        """Get regions

        Get a list of regions  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_regions_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_regions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/regions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_regions_region_id(self, region_id, **kwargs):
        """Get region information

        Get information on a region  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_regions_region_id(region_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int region_id: region_id integer (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_regions_region_id_with_http_info(region_id, **kwargs)
        else:
            data = self.get_universe_regions_region_id_with_http_info(region_id, **kwargs)
            return data

    def get_universe_regions_region_id_with_http_info(self, region_id, **kwargs):
        """Get region information

        Get information on a region  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_regions_region_id_with_http_info(region_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int region_id: region_id integer (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['region_id', 'accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_regions_region_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'region_id' is set
        if self.api_client.client_side_validation and ('region_id' not in params or
                                                       params['region_id'] is None):
            raise ValueError("Missing the required parameter `region_id` when calling `get_universe_regions_region_id`")

        collection_formats = {}

        path_params = {}
        if 'region_id' in params:
            path_params['region_id'] = params['region_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/regions/{region_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_stargates_stargate_id(self, stargate_id, **kwargs):
        """Get stargate information

        Get information on a stargate  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_stargates_stargate_id(stargate_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int stargate_id: stargate_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_stargates_stargate_id_with_http_info(stargate_id, **kwargs)
        else:
            data = self.get_universe_stargates_stargate_id_with_http_info(stargate_id, **kwargs)
            return data

    def get_universe_stargates_stargate_id_with_http_info(self, stargate_id, **kwargs):
        """Get stargate information

        Get information on a stargate  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_stargates_stargate_id_with_http_info(stargate_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int stargate_id: stargate_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['stargate_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_stargates_stargate_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'stargate_id' is set
        if self.api_client.client_side_validation and ('stargate_id' not in params or
                                                       params['stargate_id'] is None):
            raise ValueError(
                "Missing the required parameter `stargate_id` when calling `get_universe_stargates_stargate_id`")

        collection_formats = {}

        path_params = {}
        if 'stargate_id' in params:
            path_params['stargate_id'] = params['stargate_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/stargates/{stargate_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_stars_star_id(self, star_id, **kwargs):
        """Get star information

        Get information on a star  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_stars_star_id(star_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int star_id: star_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_stars_star_id_with_http_info(star_id, **kwargs)
        else:
            data = self.get_universe_stars_star_id_with_http_info(star_id, **kwargs)
            return data

    def get_universe_stars_star_id_with_http_info(self, star_id, **kwargs):
        """Get star information

        Get information on a star  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_stars_star_id_with_http_info(star_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int star_id: star_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['star_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_stars_star_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'star_id' is set
        if self.api_client.client_side_validation and ('star_id' not in params or
                                                       params['star_id'] is None):
            raise ValueError("Missing the required parameter `star_id` when calling `get_universe_stars_star_id`")

        collection_formats = {}

        path_params = {}
        if 'star_id' in params:
            path_params['star_id'] = params['star_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/stars/{star_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_stations_station_id(self, station_id, **kwargs):
        """Get station information

        Get information on a station  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_stations_station_id(station_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int station_id: station_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_stations_station_id_with_http_info(station_id, **kwargs)
        else:
            data = self.get_universe_stations_station_id_with_http_info(station_id, **kwargs)
            return data

    def get_universe_stations_station_id_with_http_info(self, station_id, **kwargs):
        """Get station information

        Get information on a station  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_stations_station_id_with_http_info(station_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int station_id: station_id integer (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_stations_station_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if self.api_client.client_side_validation and ('station_id' not in params or
                                                       params['station_id'] is None):
            raise ValueError(
                "Missing the required parameter `station_id` when calling `get_universe_stations_station_id`")

        collection_formats = {}

        path_params = {}
        if 'station_id' in params:
            path_params['station_id'] = params['station_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v2/universe/stations/{station_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_structures(self, **kwargs) -> Dict:
        """List all public structures

        List all public structures  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_structures(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str filter: Only list public structures that have this service online
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_structures_with_http_info(**kwargs)
        else:
            data = self.get_universe_structures_with_http_info(**kwargs)
            return data

    def get_universe_structures_with_http_info(self, **kwargs) -> Dict:
        """List all public structures

        List all public structures  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_structures_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str filter: Only list public structures that have this service online
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'filter', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_structures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'filter' in params:
            query_params.append(('filter', params['filter']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/structures/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_structures_structure_id(self, structure_id, **kwargs):
        """Get structure information

        Returns information on requested structure if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_structures_structure_id(structure_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int structure_id: An Eve structure ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_structures_structure_id_with_http_info(structure_id, **kwargs)
        else:
            data = self.get_universe_structures_structure_id_with_http_info(structure_id, **kwargs)
            return data

    def get_universe_structures_structure_id_with_http_info(self, structure_id, **kwargs):
        """Get structure information

        Returns information on requested structure if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_structures_structure_id_with_http_info(structure_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int structure_id: An Eve structure ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['structure_id', 'datasource', 'if_none_match', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_structures_structure_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'structure_id' is set
        if self.api_client.client_side_validation and ('structure_id' not in params or
                                                       params['structure_id'] is None):
            raise ValueError(
                "Missing the required parameter `structure_id` when calling `get_universe_structures_structure_id`")

        collection_formats = {}

        path_params = {}
        if 'structure_id' in params:
            path_params['structure_id'] = params['structure_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v2/universe/structures/{structure_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_system_jumps(self, **kwargs) -> Dict:
        """Get system jumps

        Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_system_jumps(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_system_jumps_with_http_info(**kwargs)
        else:
            data = self.get_universe_system_jumps_with_http_info(**kwargs)
            return data

    def get_universe_system_jumps_with_http_info(self, **kwargs) -> Dict:
        """Get system jumps

        Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_system_jumps_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_system_jumps" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/system_jumps/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_system_kills(self, **kwargs) -> Dict:
        """Get system kills

        Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_system_kills(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_system_kills_with_http_info(**kwargs)
        else:
            data = self.get_universe_system_kills_with_http_info(**kwargs)
            return data

    def get_universe_system_kills_with_http_info(self, **kwargs) -> Dict:
        """Get system kills

        Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  ---  This route is cached for up to 3600 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_system_kills_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_system_kills" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v2/universe/system_kills/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_systems(self, **kwargs) -> Dict:
        """Get solar systems

        Get a list of solar systems  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_systems(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_systems_with_http_info(**kwargs)
        else:
            data = self.get_universe_systems_with_http_info(**kwargs)
            return data

    def get_universe_systems_with_http_info(self, **kwargs) -> Dict:
        """Get solar systems

        Get a list of solar systems  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_systems_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_systems" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/systems/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_systems_system_id(self, system_id, **kwargs):
        """Get solar system information

        Get information on a solar system.  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_systems_system_id(system_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int system_id: system_id integer (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_systems_system_id_with_http_info(system_id, **kwargs)
        else:
            data = self.get_universe_systems_system_id_with_http_info(system_id, **kwargs)
            return data

    def get_universe_systems_system_id_with_http_info(self, system_id, **kwargs):
        """Get solar system information

        Get information on a solar system.  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_systems_system_id_with_http_info(system_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int system_id: system_id integer (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['system_id', 'accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_systems_system_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'system_id' is set
        if self.api_client.client_side_validation and ('system_id' not in params or
                                                       params['system_id'] is None):
            raise ValueError("Missing the required parameter `system_id` when calling `get_universe_systems_system_id`")

        collection_formats = {}

        path_params = {}
        if 'system_id' in params:
            path_params['system_id'] = params['system_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v4/universe/systems/{system_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_types(self, **kwargs) -> Dict:
        """Get types

        Get a list of type ids  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_types(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param int page: Which page of results to return
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_types_with_http_info(**kwargs)
        else:
            data = self.get_universe_types_with_http_info(**kwargs)
            return data

    def get_universe_types_with_http_info(self, **kwargs) -> Dict:
        """Get types

        Get a list of type ids  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_types_with_http_info(async_req=True)
        result = thread.get()

        :param async_req bool
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param int page: Which page of results to return
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datasource', 'if_none_match', 'page']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_types" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 1):
            raise ValueError(
                "Invalid value for parameter `page` when calling `get_universe_types`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/types/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_universe_types_type_id(self, type_id, **kwargs):
        """Get type information

        Get information on a type  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_types_type_id(type_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int type_id: An Eve item type ID (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_universe_types_type_id_with_http_info(type_id, **kwargs)
        else:
            data = self.get_universe_types_type_id_with_http_info(type_id, **kwargs)
            return data

    def get_universe_types_type_id_with_http_info(self, type_id, **kwargs):
        """Get type information

        Get information on a type  ---  This route expires daily at 11:05
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.get_universe_types_type_id_with_http_info(type_id, async_req=True)
        result = thread.get()

        :param async_req bool
        :param int type_id: An Eve item type ID (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type_id', 'accept_language', 'datasource', 'if_none_match', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_universe_types_type_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type_id' is set
        if self.api_client.client_side_validation and ('type_id' not in params or
                                                       params['type_id'] is None):
            raise ValueError("Missing the required parameter `type_id` when calling `get_universe_types_type_id`")

        collection_formats = {}

        path_params = {}
        if 'type_id' in params:
            path_params['type_id'] = params['type_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v3/universe/types/{type_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_universe_ids(self, names, **kwargs):
        """Bulk names to IDs

        Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.post_universe_ids(names, async_req=True)
        result = thread.get()

        :param async_req bool
        :param list[str] names: The names to resolve (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.post_universe_ids_with_http_info(names, **kwargs)
        else:
            data = self.post_universe_ids_with_http_info(names, **kwargs)
            return data

    def post_universe_ids_with_http_info(self, names, **kwargs):
        """Bulk names to IDs

        Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.post_universe_ids_with_http_info(names, async_req=True)
        result = thread.get()

        :param async_req bool
        :param list[str] names: The names to resolve (required)
        :param str accept_language: Language to use in the response
        :param str datasource: The server name you would like data from
        :param str language: Language to use in the response, takes precedence over Accept-Language
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['names', 'accept_language', 'datasource', 'language']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_universe_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'names' is set
        if self.api_client.client_side_validation and ('names' not in params or
                                                       params['names'] is None):
            raise ValueError("Missing the required parameter `names` when calling `post_universe_ids`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'language' in params:
            query_params.append(('language', params['language']))

        header_params = {}
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'names' in params:
            body_params = params['names']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v1/universe/ids/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_universe_names(self, ids, **kwargs):
        """Get names and categories for a set of IDs

        Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.post_universe_names(ids, async_req=True)
        result = thread.get()

        :param async_req bool
        :param list[int] ids: The ids to resolve (required)
        :param str datasource: The server name you would like data from
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.post_universe_names_with_http_info(ids, **kwargs)
        else:
            data = self.post_universe_names_with_http_info(ids, **kwargs)
            return data

    def post_universe_names_with_http_info(self, ids, **kwargs):
        """Get names and categories for a set of IDs

        Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        thread = api.post_universe_names_with_http_info(ids, async_req=True)
        result = thread.get()

        :param async_req bool
        :param list[int] ids: The ids to resolve (required)
        :param str datasource: The server name you would like data from
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'datasource']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_universe_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if self.api_client.client_side_validation and ('ids' not in params or
                                                       params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `post_universe_names`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ids' in params:
            body_params = params['ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(
            '/v3/universe/names/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
