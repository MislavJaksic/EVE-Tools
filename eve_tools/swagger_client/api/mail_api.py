# coding: utf-8

"""
    EVE Swagger Interface

    An OpenAPI for EVE Online

    OpenAPI spec version: 1.7.15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from eve_tools.swagger_client.api_client import ApiClient


class MailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_characters_character_id_mail_labels_label_id(self, character_id, label_id, **kwargs):
        """Delete a mail label

        Delete a mail label  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_characters_character_id_mail_labels_label_id(character_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param int label_id: An EVE label id (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.delete_characters_character_id_mail_labels_label_id_with_http_info(character_id, label_id,
                                                                                           **kwargs)
        else:
            (data) = self.delete_characters_character_id_mail_labels_label_id_with_http_info(character_id, label_id,
                                                                                             **kwargs)
            return data

    def delete_characters_character_id_mail_labels_label_id_with_http_info(self, character_id, label_id, **kwargs):
        """Delete a mail label

        Delete a mail label  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_characters_character_id_mail_labels_label_id_with_http_info(character_id, label_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param int label_id: An EVE label id (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'label_id', 'datasource', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_characters_character_id_mail_labels_label_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `delete_characters_character_id_mail_labels_label_id`")
        # verify the required parameter 'label_id' is set
        if self.api_client.client_side_validation and ('label_id' not in params or
                                                       params['label_id'] is None):
            raise ValueError(
                "Missing the required parameter `label_id` when calling `delete_characters_character_id_mail_labels_label_id`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `delete_characters_character_id_mail_labels_label_id`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']
        if 'label_id' in params:
            path_params['label_id'] = params['label_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/labels/{label_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_characters_character_id_mail_mail_id(self, character_id, mail_id, **kwargs):
        """Delete a mail

        Delete a mail  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_characters_character_id_mail_mail_id(character_id, mail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param int mail_id: An EVE mail ID (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.delete_characters_character_id_mail_mail_id_with_http_info(character_id, mail_id, **kwargs)
        else:
            (data) = self.delete_characters_character_id_mail_mail_id_with_http_info(character_id, mail_id, **kwargs)
            return data

    def delete_characters_character_id_mail_mail_id_with_http_info(self, character_id, mail_id, **kwargs):
        """Delete a mail

        Delete a mail  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_characters_character_id_mail_mail_id_with_http_info(character_id, mail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param int mail_id: An EVE mail ID (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'mail_id', 'datasource', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_characters_character_id_mail_mail_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `delete_characters_character_id_mail_mail_id`")
        # verify the required parameter 'mail_id' is set
        if self.api_client.client_side_validation and ('mail_id' not in params or
                                                       params['mail_id'] is None):
            raise ValueError(
                "Missing the required parameter `mail_id` when calling `delete_characters_character_id_mail_mail_id`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `delete_characters_character_id_mail_mail_id`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']
        if 'mail_id' in params:
            path_params['mail_id'] = params['mail_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/{mail_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_characters_character_id_mail(self, character_id, **kwargs):
        """Return mail headers

        Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards  ---  This route is cached for up to 30 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param list[int] labels: Fetch only mails that match one or more of the given labels
        :param int last_mail_id: List only mail with an ID lower than the given ID, if present
        :param str token: Access token to use if unable to set a header
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_characters_character_id_mail_with_http_info(character_id, **kwargs)
        else:
            (data) = self.get_characters_character_id_mail_with_http_info(character_id, **kwargs)
            return data

    def get_characters_character_id_mail_with_http_info(self, character_id, **kwargs):
        """Return mail headers

        Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards  ---  This route is cached for up to 30 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_with_http_info(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param list[int] labels: Fetch only mails that match one or more of the given labels
        :param int last_mail_id: List only mail with an ID lower than the given ID, if present
        :param str token: Access token to use if unable to set a header
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'datasource', 'if_none_match', 'labels', 'last_mail_id', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_characters_character_id_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `get_characters_character_id_mail`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `get_characters_character_id_mail`, must be a value greater than or equal to `1`")
        if self.api_client.client_side_validation and ('labels' in params and
                                                       len(params['labels']) > 25):
            raise ValueError(
                "Invalid value for parameter `labels` when calling `get_characters_character_id_mail`, number of items must be less than or equal to `25`")
        if self.api_client.client_side_validation and ('labels' in params and
                                                       len(params['labels']) < 1):
            raise ValueError(
                "Invalid value for parameter `labels` when calling `get_characters_character_id_mail`, number of items must be greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'labels' in params:
            query_params.append(('labels', params['labels']))
            collection_formats['labels'] = 'multi'
        if 'last_mail_id' in params:
            query_params.append(('last_mail_id', params['last_mail_id']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_characters_character_id_mail_labels(self, character_id, **kwargs):
        """Get mail labels and unread counts

        Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  This route is cached for up to 30 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_labels(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_characters_character_id_mail_labels_with_http_info(character_id, **kwargs)
        else:
            (data) = self.get_characters_character_id_mail_labels_with_http_info(character_id, **kwargs)
            return data

    def get_characters_character_id_mail_labels_with_http_info(self, character_id, **kwargs):
        """Get mail labels and unread counts

        Return a list of the users mail labels, unread counts for each label and a total unread count.  ---  This route is cached for up to 30 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_labels_with_http_info(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'datasource', 'if_none_match', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_characters_character_id_mail_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `get_characters_character_id_mail_labels`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `get_characters_character_id_mail_labels`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v3/characters/{character_id}/mail/labels/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_characters_character_id_mail_lists(self, character_id, **kwargs):
        """Return mailing list subscriptions

        Return all mailing lists that the character is subscribed to  ---  This route is cached for up to 120 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_lists(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_characters_character_id_mail_lists_with_http_info(character_id, **kwargs)
        else:
            (data) = self.get_characters_character_id_mail_lists_with_http_info(character_id, **kwargs)
            return data

    def get_characters_character_id_mail_lists_with_http_info(self, character_id, **kwargs):
        """Return mailing list subscriptions

        Return all mailing lists that the character is subscribed to  ---  This route is cached for up to 120 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_lists_with_http_info(character_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'datasource', 'if_none_match', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_characters_character_id_mail_lists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `get_characters_character_id_mail_lists`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `get_characters_character_id_mail_lists`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/lists/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_characters_character_id_mail_mail_id(self, character_id, mail_id, **kwargs):
        """Return a mail

        Return the contents of an EVE mail  ---  This route is cached for up to 30 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_mail_id(character_id, mail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param int mail_id: An EVE mail ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.get_characters_character_id_mail_mail_id_with_http_info(character_id, mail_id, **kwargs)
        else:
            (data) = self.get_characters_character_id_mail_mail_id_with_http_info(character_id, mail_id, **kwargs)
            return data

    def get_characters_character_id_mail_mail_id_with_http_info(self, character_id, mail_id, **kwargs):
        """Return a mail

        Return the contents of an EVE mail  ---  This route is cached for up to 30 seconds
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_characters_character_id_mail_mail_id_with_http_info(character_id, mail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param int mail_id: An EVE mail ID (required)
        :param str datasource: The server name you would like data from
        :param str if_none_match: ETag from a previous request. A 304 will be returned if this matches the current ETag
        :param str token: Access token to use if unable to set a header
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'mail_id', 'datasource', 'if_none_match', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_characters_character_id_mail_mail_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `get_characters_character_id_mail_mail_id`")
        # verify the required parameter 'mail_id' is set
        if self.api_client.client_side_validation and ('mail_id' not in params or
                                                       params['mail_id'] is None):
            raise ValueError(
                "Missing the required parameter `mail_id` when calling `get_characters_character_id_mail_mail_id`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `get_characters_character_id_mail_mail_id`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']
        if 'mail_id' in params:
            path_params['mail_id'] = params['mail_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}
        if 'if_none_match' in params:
            header_params['If-None-Match'] = params['if_none_match']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/{mail_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_characters_character_id_mail(self, character_id, mail, **kwargs):
        """Send a new mail

        Create and send a new mail  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_characters_character_id_mail(character_id, mail, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param Mail mail: The mail to send (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.post_characters_character_id_mail_with_http_info(character_id, mail, **kwargs)
        else:
            (data) = self.post_characters_character_id_mail_with_http_info(character_id, mail, **kwargs)
            return data

    def post_characters_character_id_mail_with_http_info(self, character_id, mail, **kwargs):
        """Send a new mail

        Create and send a new mail  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_characters_character_id_mail_with_http_info(character_id, mail, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param Mail mail: The mail to send (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'mail', 'datasource', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_characters_character_id_mail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `post_characters_character_id_mail`")
        # verify the required parameter 'mail' is set
        if self.api_client.client_side_validation and ('mail' not in params or
                                                       params['mail'] is None):
            raise ValueError("Missing the required parameter `mail` when calling `post_characters_character_id_mail`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `post_characters_character_id_mail`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mail' in params:
            body_params = params['mail']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_characters_character_id_mail_labels(self, character_id, label, **kwargs):
        """Create a mail label

        Create a mail label  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_characters_character_id_mail_labels(character_id, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param Label label: Label to create (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.post_characters_character_id_mail_labels_with_http_info(character_id, label, **kwargs)
        else:
            (data) = self.post_characters_character_id_mail_labels_with_http_info(character_id, label, **kwargs)
            return data

    def post_characters_character_id_mail_labels_with_http_info(self, character_id, label, **kwargs):
        """Create a mail label

        Create a mail label  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_characters_character_id_mail_labels_with_http_info(character_id, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param Label label: Label to create (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'label', 'datasource', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_characters_character_id_mail_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `post_characters_character_id_mail_labels`")
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and ('label' not in params or
                                                       params['label'] is None):
            raise ValueError(
                "Missing the required parameter `label` when calling `post_characters_character_id_mail_labels`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `post_characters_character_id_mail_labels`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'label' in params:
            body_params = params['label']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v2/characters/{character_id}/mail/labels/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_characters_character_id_mail_mail_id(self, character_id, contents, mail_id, **kwargs):
        """Update metadata about a mail

        Update metadata about a mail  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_characters_character_id_mail_mail_id(character_id, contents, mail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param Contents contents: Data used to update the mail (required)
        :param int mail_id: An EVE mail ID (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = False
        if kwargs.get('async_req'):
            return self.put_characters_character_id_mail_mail_id_with_http_info(character_id, contents, mail_id,
                                                                                **kwargs)
        else:
            (data) = self.put_characters_character_id_mail_mail_id_with_http_info(character_id, contents, mail_id,
                                                                                  **kwargs)
            return data

    def put_characters_character_id_mail_mail_id_with_http_info(self, character_id, contents, mail_id, **kwargs):
        """Update metadata about a mail

        Update metadata about a mail  --- 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_characters_character_id_mail_mail_id_with_http_info(character_id, contents, mail_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int character_id: An EVE character ID (required)
        :param Contents contents: Data used to update the mail (required)
        :param int mail_id: An EVE mail ID (required)
        :param str datasource: The server name you would like data from
        :param str token: Access token to use if unable to set a header
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'contents', 'mail_id', 'datasource', 'token']
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_characters_character_id_mail_mail_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if self.api_client.client_side_validation and ('character_id' not in params or
                                                       params['character_id'] is None):
            raise ValueError(
                "Missing the required parameter `character_id` when calling `put_characters_character_id_mail_mail_id`")
        # verify the required parameter 'contents' is set
        if self.api_client.client_side_validation and ('contents' not in params or
                                                       params['contents'] is None):
            raise ValueError(
                "Missing the required parameter `contents` when calling `put_characters_character_id_mail_mail_id`")
        # verify the required parameter 'mail_id' is set
        if self.api_client.client_side_validation and ('mail_id' not in params or
                                                       params['mail_id'] is None):
            raise ValueError(
                "Missing the required parameter `mail_id` when calling `put_characters_character_id_mail_mail_id`")

        if self.api_client.client_side_validation and ('character_id' in params and params['character_id'] < 1):
            raise ValueError(
                "Invalid value for parameter `character_id` when calling `put_characters_character_id_mail_mail_id`, must be a value greater than or equal to `1`")
        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['character_id'] = params['character_id']
        if 'mail_id' in params:
            path_params['mail_id'] = params['mail_id']

        query_params = []
        if 'datasource' in params:
            query_params.append(('datasource', params['datasource']))
        if 'token' in params:
            query_params.append(('token', params['token']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'contents' in params:
            body_params = params['contents']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['evesso']

        return self.api_client.call_api(
            '/v1/characters/{character_id}/mail/{mail_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
